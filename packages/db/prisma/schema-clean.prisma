// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth Models - Mapped to existing tables
model User {
  id             String   @id @default(cuid()) @map("id")
  email          String   @unique @map("email")
  name           String?  @map("name")
  role           String?  @map("role")
  status         String?  @map("status")
  hashedPassword String?  @map("hashedPassword")
  emailVerified  DateTime? @map("emailVerified")
  mustReauthAt   DateTime? @map("mustReauthAt")
  targetAppUrl   String?  @map("targetAppUrl")
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  // Relations
  accounts       Account[]
  sessions       Session[]
  refreshTokens  RefreshToken[]
  securityAuditLogs SecurityAuditLog[]

  @@map("common_user")
}

model Account {
  id                String  @id @default(cuid()) @map("id")
  userId            String  @map("userId")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("providerAccountId")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  scope             String? @map("scope")
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("common_account")
}

model Session {
  id           String   @id @default(cuid()) @map("id")
  sessionToken String   @unique @map("sessionToken")
  userId       String   @map("userId")
  expires      DateTime @map("expires")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("common_session")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("common_verification_token")
}

// Essential existing models (introspected)
model catalog_product {
  id                         String                      @id
  sku                        String                      @unique
  type                       catalog_product_type
  title                      String
  description                String?
  images                     Json
  colorPalette               Json?
  tags                       Json?
  status                     catalog_product_status      @default(DRAFT)
  artistRefId                String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  catalog_collectible_detail catalog_collectible_detail?
  catalog_painting_detail    catalog_painting_detail?
  catalog_poster_detail      catalog_poster_detail?
  catalog_artist_ref         catalog_artist_ref?         @relation(fields: [artistRefId], references: [id])
  catalog_variant            catalog_variant[]
  wishlist_items             wishlist_items[]

  @@index([artistRefId], map: "catalog_product_artistRefId_fkey")
}

model catalog_painting_detail {
  id              String          @id
  productId       String          @unique
  medium          String
  dimensions      String
  yearCreated     Int?
  frameType       String?
  catalog_product catalog_product @relation(fields: [productId], references: [id])
}

model catalog_variant {
  id                String              @id
  productId         String
  sku               String              @unique
  name              String?
  priceCents        Int
  stockLevel        Int                 @default(0)
  weightGrams       Int?
  catalog_product   catalog_product     @relation(fields: [productId], references: [id])
  orders_order_item orders_order_item[]

  @@index([productId], map: "catalog_variant_productId_fkey")
}

// Enums
enum catalog_product_type {
  PAINTING
  POSTER
  COLLECTIBLE
}

enum catalog_product_status {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}
