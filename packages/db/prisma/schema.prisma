generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  PAINTING
  POSTER
  COLLECTIBLE
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  PENDING
  PICKED
  PACKED
  SHIPPED
  DELIVERED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SocialPlatform {
  INSTAGRAM
  TWITTER
  FACEBOOK
  TIKTOK
}

enum Role { 
  customer
  artist
  admin
  operator
  service
  social_worker
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String?  // for credentials authentication
  role          Role     @default(customer)
  status        String   @default("ACTIVE") // ACTIVE|SUSPENDED
  mustReauthAt  DateTime? // for session invalidation
  targetAppUrl  String?  // per-user override for app URL
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  addresses     Address[]
  accounts      Account[]
  sessions      Session[]
  serviceTokens ServiceToken[]
  wishlistItems WishlistItem[]
  @@index([email])
  @@map("common_user")
}

model Address {
  id        String  @id @default(cuid())
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
  line1     String
  city      String
  country   String
  phone     String?
  isDefault Boolean  @default(false)
  @@map("common_address")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  action      String
  entity      String
  entityId    String
  meta        Json?
  createdAt   DateTime @default(now())
  @@map("common_audit_log")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
  @@map("common_account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  @@map("common_session")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  @@index([identifier])
  @@map("common_verification_token")
}

model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String   // base32
  enabled   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  @@map("common_2fa_secret")
}

model ServiceToken {
  id           String   @id @default(cuid())
  userId       String
  name         String        // e.g., "social-worker"
  tokenHash    String        // hash of PAT
  scopes       String        // e.g., "events:read,posts:write"
  active       Boolean @default(true)
  lastUsedAt   DateTime?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  @@map("common_service_token")
}

model ArtistRef {
  id          String  @id @default(cuid())
  displayName String
  bio         String?
  country     String?
  handle      String? @unique
  products    Product[]
  @@map("catalog_artist_ref")
}

model Product {
  id          String      @id @default(cuid())
  sku         String      @unique
  type        ProductType
  title       String
  description String?
  images      Json
  colorPalette Json?
  tags        Json?
  status      ProductStatus @default(DRAFT)
  artistRefId String?
  artistRef   ArtistRef?  @relation(fields: [artistRefId], references: [id])
  variants    Variant[]
  paintingDetail PaintingDetail?
  posterDetail   PosterDetail?
  collectibleDetail CollectibleDetail?
  wishlistItems WishlistItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("catalog_product")
}

model Variant {
  id          String  @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  sku         String  @unique
  name        String?
  priceCents  Int
  stockLevel  Int     @default(0)
  weightGrams Int?
  dimensions  Json?
  orderItems  OrderItem[]
  @@map("catalog_variant")
}

model PaintingDetail {
  id          String  @id @default(cuid())
  productId   String  @unique
  product     Product @relation(fields: [productId], references: [id])
  medium      String
  dimensions  String
  yearCreated Int?
  frameType   String?
  @@map("catalog_painting_detail")
}

model PosterDetail {
  id          String  @id @default(cuid())
  productId   String  @unique
  product     Product @relation(fields: [productId], references: [id])
  size        String
  paperType   String
  printType   String
  @@map("catalog_poster_detail")
}

model CollectibleDetail {
  id          String  @id @default(cuid())
  productId   String  @unique
  product     Product @relation(fields: [productId], references: [id])
  material    String
  edition     String?
  certificate String?
  rarity      String?
  @@map("catalog_collectible_detail")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  email       String
  status      OrderStatus @default(PENDING)
  currency    String      @default("SAR")
  totalCents  Int
  placedAt    DateTime    @default(now())
  items       OrderItem[]
  payments    Payment[]
  fulfillments Fulfillment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@map("orders_order")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id])
  variantId   String
  variant     Variant @relation(fields: [variantId], references: [id])
  quantity    Int
  priceCents  Int
  @@map("orders_order_item")
}

model Payment {
  id          String        @id @default(cuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  amountCents Int
  currency    String        @default("SAR")
  status      PaymentStatus @default(PENDING)
  method      String
  reference   String?
  processedAt DateTime?
  @@map("orders_payment")
}

model ArtistProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  bio         String?
  specialties Json?
  portfolio   Json?
  commission  Json?
  @@map("artists_profile")
}

model Commission {
  id          String  @id @default(cuid())
  artistId    String
  customerId  String
  title       String
  description String?
  budgetCents Int
  status      String  @default("PENDING")
  deadline    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("artists_commission")
}

model Fulfillment {
  id          String            @id @default(cuid())
  orderId     String
  order       Order             @relation(fields: [orderId], references: [id])
  status      FulfillmentStatus @default(PENDING)
  pickedByUserId String?
  packedByUserId String?
  shipments   Shipment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  @@map("ops_fulfillment")
}

model Shipment {
  id           String  @id @default(cuid())
  fulfillmentId String
  fulfillment   Fulfillment @relation(fields: [fulfillmentId], references: [id])
  carrier      String
  tracking     String
  labelUrl     String?
  costCents    Int?
  etaDate      DateTime?
  @@map("ops_shipment")
}

model SupportTicket {
  id          String        @id @default(cuid())
  userId      String
  subject     String
  description String
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assignedToUserId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@map("ops_support_ticket")
}

model SocialChannel {
  id          String        @id @default(cuid())
  platform    SocialPlatform
  handle      String
  isActive    Boolean       @default(true)
  lastPosted  DateTime?
  posts       SocialPost[]
  @@map("social_channel")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, productId])
  @@map("wishlist_items")
}

model SocialPost {
  id          String        @id @default(cuid())
  channelId   String
  channel     SocialChannel @relation(fields: [channelId], references: [id])
  content     String
  media       Json?
  scheduledAt DateTime?
  postedAt    DateTime?
  status      String        @default("DRAFT")
  @@map("social_post")
}
